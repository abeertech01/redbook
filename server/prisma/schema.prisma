generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  username          String    @unique
  email             String    @unique
  password          String
  posts             Post[]
  comments          Comment[]
  messages          Message[]
  chats             Chat[]
  participatedChats Chat[]    @relation("ChatParticipate")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("users")
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  content     String
  upvoteIds   String[]
  downvoteIds String[]
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@map("posts")
}

model Comment {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  upvoteIds   String[]
  downvoteIds String[]
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Chat {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members     User[]    @relation("ChatParticipate")
  lastMessage String    @default("No Messages yet...")

  @@map("chats")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}
